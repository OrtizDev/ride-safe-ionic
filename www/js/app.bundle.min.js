angular.module('app', ['ionic', 'ngCordova', 'app.controllers', 'app.routes', 'app.directives','app.services', 'ngOpenFB', 'uiGmapgoogle-maps','googlemaps.init',])

.config(function($ionicConfigProvider, $sceDelegateProvider){
  $sceDelegateProvider.resourceUrlWhitelist([ 'self','*://www.youtube.com/**', '*://player.vimeo.com/video/**']);
})

.run(function($ionicPlatform, $openFB) {
  $openFB.init({appId: '1436912249941753'});
  $ionicPlatform.ready(function() {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if (window.StatusBar) {
      // org.apache.cordova.statusbar required
      StatusBar.styleDefault();
    }
  });
})

/*
  This directive is used to disable the "drag to open" functionality of the Side-Menu
  when you are dragging a Slider component.
*/
.directive('disableSideMenuDrag', ['$ionicSideMenuDelegate', '$rootScope', function($ionicSideMenuDelegate, $rootScope) {
    return {
        restrict: "A",
        controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {

            function stopDrag(){
              $ionicSideMenuDelegate.canDragContent(false);
            }

            function allowDrag(){
              $ionicSideMenuDelegate.canDragContent(true);
            }

            $rootScope.$on('$ionicSlides.slideChangeEnd', allowDrag);
            $element.on('touchstart', stopDrag);
            $element.on('touchend', allowDrag);
            $element.on('mousedown', stopDrag);
            $element.on('mouseup', allowDrag);

        }]
    };
}])

/*
  This directive is used to open regular and dynamic href links inside of inappbrowser.
*/
.directive('hrefInappbrowser', function() {
  return {
    restrict: 'A',
    replace: false,
    transclude: false,
    link: function(scope, element, attrs) {
      var href = attrs['hrefInappbrowser'];

      attrs.$observe('hrefInappbrowser', function(val){
        href = val;
      });

      element.bind('click', function (event) {

        window.open(href, '_system', 'location=yes');

        event.preventDefault();
        event.stopPropagation();

      });
    }
  };
});


angular.module('app.controllers', ['ngCordova', 'uiGmapgoogle-maps', 'ngOpenFB', 'ngStorage'])
  .controller('myRoutesCtrl', ['$scope', '$stateParams',
    function ($scope, $stateParams) {

      $('.routes-list-item').click(function () {
        $('.routes-list-item').removeClass('active');
        $(this).addClass('active');
      });

    }])

  .controller('userRegisterCtrl', ['$scope', '$stateParams', '$state', '$rootScope', 'dataUserRegister',// The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams, $state, $rootScope, dataUserRegister) {

      $.ajax({
        type: 'GET',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/state',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            var estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_estado + '">' + item.nombre + '</option>';
            });
            $('#states').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener los estados');
        }
      });

      $scope.typegender = [
        { gender: 'F', genderName: 'Femenino' },
        { gender: 'M', genderName: 'Masculino' }
      ];

      $scope.max = new Date();
      $scope.emailFormat = /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/;
      $scope.minpassword = 6;

      $scope.updateCi = function (state) {
        $('#city').empty();
        var parametros = {
          'city': state
        };

        $.ajax({
          type: 'POST',
          url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/cities',
          data: parametros,
          dataType: 'json',
          success: function (data) {
            if (data.error) {
              alert(data.message);
            } else if (!data.error) {
              var estados = JSON.parse(data.message);
              var toAppend = '';
              $.each(estados, function (i, item) {
                toAppend += '<option value="' + item.id_municipio + '">' + item.nombre + '</option>';
              });
              $('#city').append(toAppend);
            }
          },
          error: function (xhr, status, error) {
            console.log(xhr.responseText);
            alert('No se pudieron obtener las ciudades');
          }
        });
      };

      $scope.motoRegis = function () {
        dataUserRegister.user.name = $('input[name=username]').val();
        dataUserRegister.user.appat = $('input[name=apat]').val();
        dataUserRegister.user.apmat = $('input[name=amat]').val();
        dataUserRegister.user.gender = $('select[name=gender_re]').val();
        dataUserRegister.user.cell = $('input[name=cellphone]').val();
        dataUserRegister.user.birth = $('input[name=bdate]').val();
        dataUserRegister.user.cellemer = $('input[name=telEmer]').val();
        dataUserRegister.user.city = $('select[name=city_re]').val();
        dataUserRegister.user.email = $('input[name=emailRe]').val();
        dataUserRegister.user.password = $('input[name=pass]').val();
        if (angular.equals($('input[name=pass]').val(), $('input[name=repass]').val())) {
          $state.go('motoRegister');
        } else {
          alert('Las contrase√±as no coinciden');
        }
      };

      $scope.login = function () {
        $state.go('login');
      };

      $('input[name=bdate]').change(function () {
        var dateValue = $(this).val();
        var splitDate = dateValue.split('-');
        $('#dateHolder').text(splitDate[2] + '/' + splitDate[1] + '/' + splitDate[0]);
      })
        .keyup();

    }])

  .controller('motoRegisterCtrl', ['$scope', '$stateParams', '$rootScope', '$state', 'dataUserRegister', 'UserSession', // The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams, $rootScope, $state, dataUserRegister, UserSession) {

      $scope.return = function () {
        $state.go('userRegister');
      };

      $.ajax({
        type: 'GET',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/brand',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            var estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_marca_moto + '">' + item.nombre + '</option>';
            });
            $('#brands').append(toAppend);
            var date = new Date();
            var year = date.getFullYear();
            var y = '';
            for (i = 1995; i <= year; i++) {
              y += '<option value="' + i + '">' + i + '</option>';
            }
            $('#year').append(y);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener las marcas');
        }
      });

      $scope.updateMod = function (model) {
        $('#models').empty();
        var parametros = {
          'brand': model
        };

        $.ajax({
          type: 'POST',
          url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/models',
          data: parametros,
          dataType: 'json',
          success: function (data) {
            if (data.error) {
              alert(data.message);
            } else if (!data.error) {
              var estados = JSON.parse(data.message);
              var toAppend = '';
              $.each(estados, function (i, item) {
                toAppend += '<option value="' + item.id_modelo + '">' + item.nombre + '</option>';
              });
              $('#models').append(toAppend);
            }
          },
          error: function (xhr, status, error) {
            console.log(xhr.responseText);
            alert('No se pudieron obtener los modelos');
          }
        });
      };

      $scope.ciudad = { checked: false };
      $scope.atv = { checked: false };
      $scope.touring = { checked: false };
      $scope.trabajo = { checked: false };
      $scope.circuitos = { checked: false };
      $scope.enduro = { checked: false };
      $scope.stunt = { checked: false };
      $scope.carretera = { checked: false };
      $scope.otro = { checked: false };

      $scope.register = function () {
        if ($('select[id=brands').val() != null) {
          if ($('select[id=models').val() != null) {
            if ($('select[id=year').val() != null) {
              if ($('input[id=plate]').val() != '') {

                var dataMoto = {
                  'brand': $('select[id=brands').val(),
                  'model': $('select[id=models').val(),
                  'year': $('select[id=year').val(),
                  'plate': $('input[id=plate]').val()
                };

                var dataUser = {
                  'name': dataUserRegister.user.name,
                  'apPat': dataUserRegister.user.appat,
                  'apmat': dataUserRegister.user.apmat,
                  'email': dataUserRegister.user.email,
                  'pass': dataUserRegister.user.password,
                  'birthday': dataUserRegister.user.birth,
                  'gender': dataUserRegister.user.gender,
                  'cellphone': dataUserRegister.user.cell,
                  'cellemergency': dataUserRegister.user.cellemer,
                  'admin': 0,
                  'ciudad': $scope.ciudad.checked ? 1 : 0,
                  'touring': $scope.touring.checked ? 1 : 0,
                  'circuitos': $scope.circuitos.checked ? 1 : 0,
                  'stunt': $scope.enduro.checked ? 1 : 0,
                  'atv': $scope.atv.checked ? 1 : 0,
                  'trabajo': $scope.trabajo.checked ? 1 : 0,
                  'enduro': $scope.enduro.checked ? 1 : 0,
                  'carretera': $scope.carretera.checked ? 1 : 0,
                  'otro': $scope.otro.checked ? $('#other').val() : ''
                };

                $.ajax({
                  type: 'POST',
                  url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/registmoto',
                  data: dataMoto,
                  dataType: 'json',
                  success: function (data) {
                    if (data.error) {
                      alert(data.message);
                    } else if (!data.error) {
                      $.ajax({
                        type: 'POST',
                        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/registuser',
                        data: dataUser,
                        dataType: 'json',
                        success: function (data) {
                          if (data.error) {
                            alert('Intentalo m√°s tarde');
                          } else if (!data.error) {
                            $state.go('thanks');
                          }
                        },
                        error: function (xhr, status, error) {
                          console.log(xhr.responseText);
                          alert('Fallo Registro, intentalo m√°s tarde');
                        }
                      });
                    }
                  },
                  error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                    alert('Intentalo m√°s tarde');
                  }
                });
              } else {
                alert('Por favor, ingresa la matricula de tu moto');
              }
            } else {
              alert('Por favor, elige un a√±o');
            }
          } else {
            alert('Por favor, elige un modelo');
          }
        } else {
          alert('Por favor, elige una marca');
        }

      };

    }])

  .controller('thanksCtrl', ['$scope', '$stateParams', 'dataUserRegister', '$state', 'UserSession',
    function ($scope, $stateParams, dataUserRegister, $state, UserSession) {

      $scope.$on('$ionicView.enter', function () {
        setTimeout(function () {
          var parametros = {
            'email': dataUserRegister.user.email,
            'password': dataUserRegister.user.password
          };
          $.ajax({
            type: 'POST',
            url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/userlogin',
            data: parametros,
            dataType: 'json',
            success: function (data) {
              if (data.error) {
                $state.go('login');
              } else if (!data.error) {
                UserSession.setData(data.id, data.nombre);
                $state.go('menu.home');
              }
            },
            error: function (xhr, status, error) {
              console.log(xhr.responseText);
              alert('No se pudo iniciar sesiÔøΩn, intÔøΩntalo mÔøΩs tarde');
              $state.go('login');
            }
          });
        }, 2500);
      });

    }])

  .controller('sp2Ctrl', ['$scope', '$stateParams', 'S2R', '$state', '$ionicModal', '$openFB', '$localStorage',// The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams, S2R, $state, $ionicModal, $openFB, $localStorage) {

      if ($localStorage.fbLoggedIn) {
        $scope.textFbLink = 'Vinculado con Facebook';
        $scope.fbButtonDisabled = true;
      } else {
        $scope.textFbLink = 'Vincular con Facebook';
        $scope.fbButtonDisabled = false;
      }

      $scope.$on('$ionicView.enter', function () {
        var IC = S2R.getEstateS2R_IC();
        var DR = S2R.getEstateS2R_DR();
        var AR = S2R.getEstateS2R_AR();
        var LT = S2R.getEstateS2R_LT();
        var MC = S2R.getEstateS2R_MC();
        if (IC == 'true') {
          $scope.pushNotiIC = { checked: true };
          console.log('IC ' + IC);
        } else {
          $scope.pushNotiIC = { checked: false };
        }

        if (DR == 'true') {
          $scope.pushNotiDR = { checked: true };
          console.log('DR ' + DR);
        } else {
          $scope.pushNotiDR = { checked: false };
        }

        if (AR == 'true') {
          $scope.pushNotiAR = { checked: true };
          console.log('AR' + AR);
        } else {
          $scope.pushNotiAR = { checked: false };
        }

        if (LT == 'true') {
          $scope.pushNotiLT = { checked: true };
          console.log('LT' + LT);
        } else {
          $scope.pushNotiLT = { checked: false };
        }

        if (MC == 'true') {
          $scope.pushNotiMC = { checked: true };
          console.log('MC' + MC);
        } else {
          $scope.pushNotiMC = { checked: false };
        }
      });


      $scope.saveNoti = function () {
        S2R.setEstateS2R($scope.pushNotiIC.checked,
          $scope.pushNotiDR.checked,
          $scope.pushNotiAR.checked,
          $scope.pushNotiLT.checked,
          $scope.pushNotiMC.checked);
      };

      $scope.backS2R = function () {
        $state.go('menu.home');
      };

      // Modal controller
      $ionicModal.fromTemplateUrl('modal-1.html', {
        id: '1',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal1 = modal;
      });

      $ionicModal.fromTemplateUrl('modal-2.html', {
        id: '2',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal2 = modal;
      });

      $ionicModal.fromTemplateUrl('modal-3.html', {
        id: '3',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal3 = modal;
      });

      $ionicModal.fromTemplateUrl('modal-4.html', {
        id: '4',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal4 = modal;
      });

      $ionicModal.fromTemplateUrl('modal-5.html', {
        id: '5',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal5 = modal;
      });

      $scope.openModal = function (index) {
        switch (index) {
          case 1:
            if ($localStorage.fbImpact) {
              $scope.facebookImpacts.status = true;
            } else {
              $scope.facebookImpacts.status = false;
            }
            if ($localStorage.msgImpacts) {
              $scope.msg = { Impacts: $localStorage.msgImpacts };
            } else {
              $scope.msg = { Impacts: '' };
            }
            if ($localStorage.smsImpact) {
              $scope.smsImpacts.status = true;
            } else {
              $scope.smsImpacts.status = false;
            }
            $scope.modal1.show();
            break;
          case 2:
            if ($localStorage.fbDetour) {
              $scope.facebookDetour.status = true;
            } else {
              $scope.facebookDetour.status = false;
            }
            if ($localStorage.msgDetour) {
              $scope.msg = { Detour: $localStorage.msgDetour };
            } else {
              $scope.msg = { Detour: '' };
            }
            if ($localStorage.smsDetour) {
              $scope.smsDetour.status = true;
            } else {
              $scope.smsDetour.status = false;
            }
            if ($localStorage.kmDetour) {
              $scope.kmDetour = $localStorage.kmDetour;
            } else {
              $scope.kmDetour = 1;
            }
            $scope.modal2.show();
            break;
          case 3:
            if ($localStorage.thefts) {
              $scope.theftsToggle.status = true;
            } else {
              $scope.theftsToggle.status = false;
            }
            if ($localStorage.speed) {
              $scope.speedToggle.status = true;
            } else {
              $scope.speedToggle.status = false;
            }
            if ($localStorage.accident) {
              $scope.accidentToggle.status = true;
            } else {
              $scope.accidentToggle.status = false;
            }
            if ($localStorage.kmRisk) {
              $scope.kmRisk = $localStorage.kmRisk;
            } else {
              $scope.kmRisk = 1;
            }
            $scope.modal3.show();
            break;
          case 4:
            if ($localStorage.fbTracking) {
              $scope.facebookTracking.status = true;
            } else {
              $scope.facebookTracking.status = false;
            }
            if ($localStorage.msgTracking) {
              $scope.msg = { Tracking: $localStorage.msgTracking };
            } else {
              $scope.msg = { Tracking: '' };
            }
            if ($localStorage.smsTracking) {
              $scope.smsTracking.status = true;
            } else {
              $scope.smsTracking.status = false;
            }
            if ($localStorage.kmTracking) {
              $scope.kmTracking = $localStorage.kmTracking;
            } else {
              $scope.kmTracking = 1;
            }
            $scope.modal4.show();
            break;
          case 5:
            $scope.modal5.show();
            break;
        }
        $('#sp2_content').addClass('blur-efect');
      };

      $scope.closeModal = function (index) {
        switch (index) {
          case 1:
            $scope.modal1.hide();
            break;
          case 2:
            $scope.modal2.hide();
            break;
          case 3:
            $scope.modal3.hide();
            break;
          case 4:
            $scope.modal4.hide();
            break;
          case 5:
            $scope.modal5.hide();
            break;
        }
        $('#sp2_content').removeClass('blur-efect');
      };


      //Cleanup the modal when we're done with it!
      $scope.$on('$destroy', function (index) {
        switch (index) {
          case 1:
            $scope.modal1.remove();
            break;
          case 2:
            $scope.modal2.remove();
            break;
          case 3:
            $scope.modal3.remove();
            break;
          case 4:
            $scope.modal4.remove();
            break;
          case 5:
            $scope.modal5.remove();
            break;
        }
      });

      //First modal settings
      $scope.facebookImpacts = function () {
        if ($scope.facebookImpacts.status) {
          if ($localStorage.fbLoggedIn) {
            console.log('Enabled Facebook for Impacts');
            $localStorage.fbImpact = $scope.facebookImpacts.status;
          } else {
            $scope.facebookImpacts.status = false;
            alert('Debes vincular tu cuenta con Facebook');
            console.log('Cannot enable Facebook for Impacts, no permissions');
          }
        } else {
          delete $localStorage.fbImpact;
          console.log('Disabled Facebook for Impacts');
        }
      };

      $scope.smsImpacts = function () {
        if ($scope.smsImpacts.status) {
          $localStorage.smsImpact = $scope.smsImpacts.status;
          console.log('Enabled SMS for Impacts');
        } else {
          delete $localStorage.smsImpact;
          console.log('Disabled SMS for Impacts');
        }
      };

      //Second modal settings
      $scope.facebookDetour = function () {
        if ($scope.facebookDetour.status) {
          if ($localStorage.fbLoggedIn) {
            console.log('Enabled Facebook for Detour');
            $localStorage.fbDetour = $scope.facebookDetour.status;
          } else {
            $scope.facebookDetour.status = false;
            alert('Debes vincular tu cuenta con Facebook');
            console.log('Cannot enable Facebook for Detour, no permissions');
          }
        } else {
          delete $localStorage.fbDetour;
          console.log('Disabled Facebook for Detour');
        }
      };


      $scope.smsDetour = function () {
        if ($scope.smsDetour.status) {
          $localStorage.smsDetour = $scope.smsDetour.status;
          console.log('Enabled SMS for Detour');
        } else {
          delete $localStorage.smsDetour;
          console.log('Disabled SMS for Detour');
        }
      };

      $scope.updateKmSelectedDetour = function (kmDetour) {
        $localStorage.kmDetour = kmDetour;
        console.log('Updated KM for Detour');
      };

      //Third modal settings
      $scope.accidentToggle = function () {
        if ($scope.accidentToggle.status) {
          $localStorage.accident = $scope.accidentToggle.status;
          console.log('Enabled accidents config');
        } else {
          delete $localStorage.accident;
          console.log('Disabled Accidents config');
        }
      };

      $scope.theftsToggle = function () {
        if ($scope.theftsToggle.status) {
          $localStorage.thefts = $scope.theftsToggle.status;
          console.log('Enabled thefts config');
        } else {
          delete $localStorage.thefts;
          console.log('Disabled thefts config');
        }
      };

      $scope.speedToggle = function () {
        if ($scope.speedToggle.status) {
          $localStorage.speed = $scope.speedToggle.status;
          console.log('Enabled speed config');
        } else {
          delete $localStorage.speed;
          console.log('Disabled speed config');
        }
      };

      $scope.updateKmSelectedRisk = function (kmRisk) {
        $localStorage.kmRisk = kmRisk;
        console.log('Updated KM for Risk');
      };

      //Fourth modal settings
      $scope.facebookTracking = function () {
        if ($scope.facebookTracking.status) {
          if ($localStorage.fbLoggedIn) {
            console.log('Enabled Facebook for Tracking');
            $localStorage.fbTracking = $scope.facebookTracking.status;
          } else {
            $scope.facebookTracking.status = false;
            alert('Debes vincular tu cuenta con Facebook');
            console.log('Cannot enable Facebook for Tracking, no permissions');
          }
        } else {
          delete $localStorage.fbTracking;
          console.log('Disabled Facebook for Tracking');
        }
      };

      $scope.smsTracking = function () {
        if ($scope.smsTracking.status) {
          $localStorage.smsTracking = $scope.smsTracking.status;
          console.log('Enabled SMS for Tracking');
        } else {
          delete $localStorage.smsTracking;
          console.log('Disabled SMS for Tracking');
        }
      };

      $scope.updateKmSelectedTracking = function (kmTracking) {
        $localStorage.kmTracking = kmTracking;
        console.log('Updated KM for Tracking');
      };

      //Store the message for impacts
      $scope.saveImpacts = function (msg) {
        if (msg.Impacts == '') {
          delete $localStorage.msgImpacts;
        } else {
          console.log('Saving impacts message');
          $localStorage.msgImpacts = msg.Impacts;
        }
        $scope.modal1.hide();
        $('#sp2_content').removeClass('blur-efect');
      };

      //Store the message for detours
      $scope.saveDetour = function (msg) {
        if (msg.Detour == '') {
          delete $localStorage.msgDetour;
        } else {
          console.log('Saving detour message');
          $localStorage.msgDetour = msg.Detour;
        }
        $scope.modal2.hide();
        $('#sp2_content').removeClass('blur-efect');
      };

      //Store the message for tracking
      $scope.saveTracking = function (msg) {
        if (msg.Tracking == '') {
          delete $localStorage.msgTracking;
        } else {
          console.log('Saving tracking message');
          $localStorage.msgTracking = msg.Tracking;
        }
        $scope.modal4.hide();
        $('#sp2_content').removeClass('blur-efect');
      };

      //Close the third modal and "saves" (not actually) the configs
      $scope.saveRisks = function () {
        console.log('Saving risks configs');
        $scope.modal3.hide();
        $('#sp2_content').removeClass('blur-efect');
      };

      //Facebook access
      //If the button "Vincular con Facebook" is clicked, we execute the linking to Facebook
      $scope.facebookLink = function () {
        console.log('Facebook button clicked');
        //Checks the login status
        $openFB.login({ scope: 'email' }).then(function (response) {
          if (response.status === 'connected') {
            console.log('Facebook login succeeded');
            $localStorage.fbLoggedIn = true;
            // $scope.closeLogin(); //Temporary disabled due an error which shows closeLogin() is not defined, I don't know if this works in the devices but for now, is disabled
          } else {
            $localStorage.fbLoggedIn = false;
            alert('Hubo un error al vincular la cuenta');
            console.log('Facebook login failed');
          }
        });
      };

    }])

  .controller('userManualCtrl', ['$scope', '$stateParams', // The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams) {


    }])

  .controller('configCtrl', ['$scope', '$stateParams', // The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams) {


    }])

  .controller('rightMenuCtrl', ['$scope', '$stateParams', // The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams) {


    }])

  .controller('traficAlertCtrl', ['$scope', '$stateParams', '$state', 'Alert', '$ionicHistory',
    function ($scope, $stateParams, $state, Alert, $ionicHistory) {

      $scope.type_alert = 0;

      $scope.saveAlert = function () {
        if ($scope.type_alert != 0) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
              $scope.$apply(function () {
                Alert.setAlert($scope.type_alert, '1', position.coords.latitude, position.coords.longitude, '0', 1, function (error) {
                  if (!error) {
                    alert('Alerta exitosa');
                    setTimeout(function () {
                      var $backView = $ionicHistory.backView();
                      $backView.go();
                    }, 1000);
                  } else {
                    alert('Intentalo m√°s tarde');
                  }
                });
              });
            });
          }
        } else {
          alert('Seleccionar el tipo de alerta');
        }
      };


      $scope.typeTrafic = function (item) {
        $scope.type_alert = item;
      };

      $('.alert-item').click(function () {
        $('.alert-item').removeClass('active');
        $(this).addClass('active');
      });


    }])

  .controller('policeAlertCtrl', ['$scope', '$stateParams', '$state', 'Alert', '$ionicHistory',
    function ($scope, $stateParams, $state, Alert, $ionicHistory) {

      $scope.type_alert = 0;

      $scope.saveAlert = function () {
        if ($scope.type_alert != 0) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
              $scope.$apply(function () {
                Alert.setAlert($scope.type_alert, '1', position.coords.latitude, position.coords.longitude, '0', 1, function (error) {
                  if (!error) {
                    alert('Alerta exitosa');
                    setTimeout(function () {
                      var $backView = $ionicHistory.backView();
                      $backView.go();
                    }, 1000);
                  } else {
                    alert('Intentalo m√°s tarde');
                  }
                });
              });
            });
          }
        } else {
          alert('Seleccionar el tipo de alerta');
        }
      };


      $scope.typeTrafic = function (item) {
        $scope.type_alert = item;
      };

      $('.alert-item').click(function () {
        $('.alert-item').removeClass('active');
        $(this).addClass('active');
      });


    }])

  .controller('accidentAlertCtrl', ['$scope', '$stateParams', '$state', 'Alert', '$ionicHistory',
    function ($scope, $stateParams, $state, Alert, $ionicHistory) {

      $scope.type_alert = 0;

      $scope.saveAlert = function () {
        if ($scope.type_alert != 0) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
              $scope.$apply(function () {
                Alert.setAlert($scope.type_alert, '1', position.coords.latitude, position.coords.longitude, '0', 1, function (error) {
                  if (!error) {
                    alert('Alerta exitosa');
                    setTimeout(function () {
                      var $backView = $ionicHistory.backView();
                      $backView.go();
                    }, 1000);
                  } else {
                    alert('Intentalo m√°s tarde');
                  }
                });
              });
            });
          }
        } else {
          alert('Seleccionar el tipo de alerta');
        }
      };


      $scope.typeTrafic = function (item) {
        $scope.type_alert = item;
      };

      $('.alert-item').click(function () {
        $('.alert-item').removeClass('active');
        $(this).addClass('active');
      });

    }])

  .controller('dangerAlertCtrl', ['$scope', '$stateParams', '$state', 'Alert', '$ionicHistory',
    function ($scope, $stateParams, $state, Alert, $ionicHistory) {

      $scope.type_alert = 0;

      $scope.saveAlert = function () {
        if ($scope.type_alert != 0) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
              $scope.$apply(function () {
                Alert.setAlert($scope.type_alert, '1', position.coords.latitude, position.coords.longitude, '0', 1, function (error) {
                  if (!error) {
                    alert('Alerta exitosa');
                    setTimeout(function () {
                      var $backView = $ionicHistory.backView();
                      $backView.go();
                    }, 1000);
                  } else {
                    alert('Intentalo m√°s tarde');
                  }
                });
              });
            });
          }
        } else {
          alert('Seleccionar el tipo de alerta');
        }
      };

      $scope.typeTrafic = function (item) {
        $scope.type_alert = item;
      };

      $scope.weather = function () {
        $state.go('weatherAlert');
      };

      $('.alert-item').click(function () {
        $('.alert-item').removeClass('active');
        $(this).addClass('active');
      });

    }])

  .controller('weatherAlertCtrl', ['$scope', '$stateParams', '$state', 'Alert', '$ionicHistory',
    function ($scope, $stateParams, $state, Alert, $ionicHistory) {

      $('.alert-item').click(function () {
        $('.alert-item').removeClass('active');
        $(this).addClass('active');
      });

      $scope.type_alert = 0;

      $scope.saveAlert = function () {
        if ($scope.type_alert != 0) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
              $scope.$apply(function () {
                Alert.setAlert($scope.type_alert, '1', position.coords.latitude, position.coords.longitude, '0', 1, function (error) {
                  if (!error) {
                    alert('Alerta exitosa');
                    setTimeout(function () {
                      var $backView = $ionicHistory.backView();
                      $backView.go();
                    }, 1000);
                  } else {
                    alert('Intentalo m√°s tarde');
                  }
                });
              });
            });
          }
        } else {
          alert('Seleccionar el tipo de alerta');
        }
      };

      $scope.typeTrafic = function (item) {
        $scope.type_alert = item;
      };


    }])

  .controller('closedAlertCtrl', ['$scope', '$stateParams', // The following is the constructor function for this page's controller. See https://docs.angularjs.org/guide/controller
    // You can include any angular dependencies as parameters for this function
    // TIP: Access Route Parameters for your page via $stateParams.parameterName
    function ($scope, $stateParams) {
    }])


  /**
* This part controls the advertisement, getting from the API the data
* and included the posibility to filtering.
*
* @copyright Startbluesoft 2017
* @author Cesar Zavala
* @since 10-April-2017
* @version 1.0
*/
  .controller('adsCtrl', ['$scope', '$stateParams', '$ionicLoading',
    function ($scope, $stateParams, $ionicLoading) {

      $ionicLoading.show({
        content: 'Cargando',
        animation: 'fade-in',
        showBackdop: true,
        maxWidth: 200,
        showDelay: 0
      });

      $.ajax({
        type: "GET",
        url: "http://startbluesoft.com/rideSafeApp/v1/index.php/anuncio",
        dataType: "json",
        success: function (data) {
          var html = "";
          $.each(data, function (i, j) {
            html = '<figure class="ad-item price establishment" data-establishment="' + j.id_estable + '" data-price="' + j.costo + '">'
              + ' <img src="https://dummyimage.com/600x400/000/fff" />'
              + ' <figcaption>' + j.descripcion + '<br /><b>$' + j.costo + '</b></figcaption>'
              + '</figure>';
            $("#columns").append(html);
          });
          $ionicLoading.hide();
        },
        error: function (xhr, status, error) {
          console.log("Error getting ads");
        }
      });

      $('#sorts').on('click', 'button', function () {
        var sortByValue = $(this).attr('data-sort-by');
        switch (sortByValue) {
          case 'price':
            var sort = $(".price").sort(sortDivsPrice);
            $("#columns").html(sort);
            break;
          case 'establishment':
            var sort = $(".establishment").sort(sortDivsEstablishment);
            $("#columns").html(sort);
            break;
        }
      });
      function sortDivsPrice(a, b) {
        return $(a).data("price") > $(b).data("price") ? 1 : -1;
      };

      function sortDivsEstablishment(a, b) {
        return $(a).data("establishment") > $(b).data("establishment") ? 1 : -1;
      }


    }])

angular.module('app.directives', [])

.directive('blankDirective', [function(){

}]);
angular.module('googlemaps.init', ['uiGmapgoogle-maps'])

.config(['uiGmapGoogleMapApiProvider', function(uiGmapGoogleMapApiProvider) {
    uiGmapGoogleMapApiProvider.configure({
        key: 'AIzaSyA-7VZBsxe_zzuOB9fh_345jZi15rW0zLU',
        libraries: 'weather,geometry,visualization'
    });
}])

.directive('creatorMapComponent', ['uiGmapGoogleMapApi', '$timeout',

    /*
        Do not remove this directive, it is what powers the Creator Drag & Drop Component.
    */

    function(uiGmapGoogleMapApi, $timeout) {

        return {
            restrict: 'E',
            scope: true,
            link: function($scope, $element, $attr, _c, transclude) {
            
                $scope.map = {};
                
                if ($attr.marker=="true"){
                    $scope.map.marker = {
                        id: 0
                    }
                }
                
                $attr.$observe('location', function(val){
                    
                    uiGmapGoogleMapApi.then(function(maps){

                        function setupMap(lat, lng){
                            
                            $scope.map.zoom = parseInt($attr.zoom);
                            $timeout(function(){
                                $scope.map.center = {
                                    latitude: lat,
                                    longitude: lng
                                };  
                            });
                            $scope.map.options = JSON.parse($attr.options);
                            
                            if ($attr.marker=="true"){
                                $scope.map.marker.coords = {
                                    latitude: lat,
                                    longitude: lng
                                }
                            }
                        }

                        if (val.indexOf('"latitude"') > -1){
                            val = JSON.parse(val);
                            setupMap(val.latitude, val.longitude);
                        }else{
                            var geocoder = new maps.Geocoder();
                            geocoder.geocode({'address' : val}, function(results, status){
                                
                                $scope.$apply(function(){
                                    setupMap(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                                });
            
                            });
                        }
                    });
                            
                });
            
            }
      
        };
}]);
/**
 * Angular wrapper for the OpenFB library
 * Allows you to use OpenFB "the Angular way":
 *  - As an Angular service instead of a global object
 *  - Using promises instead of callbacks
 * @author Christophe Coenraets @ccoenraets
 * @version 0.5
 */
angular.module('ngOpenFB', [])

    .factory('$openFB', function ($q, $window) {

      function init(params) {
        return $window.openFB.init(params);
      }

      function login(options) {
        var deferred = $q.defer();
        $window.openFB.login(function (result) {
          if (result.status === 'connected') {
            deferred.resolve(result);
          } else {
            deferred.reject(result);
          }
        }, options);
        return deferred.promise;
      }

      function logout() {
        var deferred = $q.defer();
        $window.openFB.logout(function () {
          deferred.resolve();
        });
        return deferred.promise;
      }

      function api(obj) {
        var deferred = $q.defer();
        obj.success = function (result) {
          deferred.resolve(result);
        };
        obj.error = function (error) {
          deferred.reject(error);
        };
        $window.openFB.api(obj);
        return deferred.promise;
      }

      function revokePermissions() {
        var deferred = $q.defer();
        $window.openFB.revokePermissions(
                function () {
                  deferred.resolve();
                },
                function () {
                  deferred.reject();
                }
            );
        return deferred.promise;
      }

      function getLoginStatus() {
        var deferred = $q.defer();
        $window.openFB.getLoginStatus(
                function (result) {
                  deferred.resolve(result);
                }
            );
        return deferred.promise;
      }

      return {
        init: init,
        login: login,
        logout: logout,
        revokePermissions: revokePermissions,
        api: api,
        getLoginStatus: getLoginStatus
      };

    });

angular.module('app.routes', [])

  .config(function ($stateProvider, $urlRouterProvider) {

    $stateProvider



      .state('menu.home', {
        url: '/home',
        cache: false,
        views: {
          'side-menu21': {
            templateUrl: 'templates/home.html',
            controller: 'homeCtrl'
          }
        },
        
      })

      .state('menu.myRoutes', {
        url: '/my-routes',
        views: {
          'side-menu21': {
            templateUrl: 'templates/myRoutes.html',
            controller: 'myRoutesCtrl'
          }
        }
      })

      .state('menu', {
        url: '/left-menu',
        templateUrl: 'templates/menu.html',
        controller: 'menuCtrl'
      })

      .state('login', {
        url: '/login',
        templateUrl: 'templates/login.html',
        controller: 'loginCtrl'
      })

      .state('userRegister', {
        url: '/user-register',
        templateUrl: 'templates/userRegister.html',
        controller: 'userRegisterCtrl'
      })

      .state('motoRegister', {
        url: '/moto-register',
        templateUrl: 'templates/motoRegister.html',
        controller: 'motoRegisterCtrl'
      })

      .state('thanks', {
        url: '/thanks',
        templateUrl: 'templates/thanks.html',
        controller: 'thanksCtrl'
      })

      .state('menu.discover', {
        url: '/discover',
        views: {
          'side-menu21': {
            templateUrl: 'templates/discover.html',
            controller: 'discoverCtrl'
          }
        }
      })

      // Caravana routes

      .state('menu.caravana', {
        url: '/caravana',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/caravana.html',
            controller: 'caravanaCtrl'
          }
        }
      })

      .state('menu.caravanaDestination', {
        url: '/caravana/destination',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/destination.html',
          }
        }
      })

      .state('menu.caravanaDiscoverRoute', {
        url: '/caravana/discover',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/discoverRoute.html',
            controller: 'discoverRouteCaravanaCtrl'
          }
        }
      })

      .state('menu.caravanaCreateRoute', {
        url: '/caravana/createRoute',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/createRoute.html',
            controller: 'caravanaCreateRouteCtrl'
          }
        }
      })

      .state('menu.caravanaReviewRoute', {
        url: '/caravana/review-route',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/reviewRoute.html',
            controller: 'CaravanaReviewRouteCtrl'
          }
        }
      })

      .state('menu.caravanaInvitations', {
        url: '/caravana/invitations',
        views: {
          'side-menu21': {
            templateUrl: 'templates/caravana/invitations.html',
            controller: 'CaravanaInvitations'
          }
        }
      })


      // End of caravana's routes
      // -----------------------------------------------------------

      .state('menu.sp2', {
        url: '/s2p',
        views: {
          'side-menu21': {
            templateUrl: 'templates/sp2.html',
            controller: 'sp2Ctrl'
          }
        }
      })

      .state('menu.userManual', {
        url: '/user-manual',
        views: {
          'side-menu21': {
            templateUrl: 'templates/userManual.html',
            controller: 'userManualCtrl'
          }
        }
      })

      .state('config', {
        url: '/configuration',
        templateUrl: 'templates/config.html',
        controller: 'configCtrl'
      })

      .state('rightMenu', {
        url: '/right-menu',
        templateUrl: 'templates/rightMenu.html',
        controller: 'rightMenuCtrl'
      })

      .state('traficAlert', {
        url: '/trafic-alert',
        templateUrl: 'templates/traficAlert.html',
        controller: 'traficAlertCtrl'
      })

      .state('policeAlert', {
        url: '/police-alert',
        templateUrl: 'templates/policeAlert.html',
        controller: 'policeAlertCtrl'
      })

      .state('accidentAlert', {
        url: '/accident-alert',
        templateUrl: 'templates/accidentAlert.html',
        controller: 'accidentAlertCtrl'
      })

      .state('dangerAlert', {
        url: '/danger-alert',
        templateUrl: 'templates/dangerAlert.html',
        controller: 'dangerAlertCtrl'
      })

      .state('weatherAlert', {
        url: '/weather-alert',
        templateUrl: 'templates/weatherAlert.html',
        controller: 'weatherAlertCtrl'
      })

      .state('closedAlert', {
        url: '/closed-alert',
        templateUrl: 'templates/closedAlert.html',
        controller: 'closedAlertCtrl'
      })

      .state('routeReview', {
        url: '/route-review',
        cache: false,
        templateUrl: 'templates/routeReview.html',
        controller: 'routeReviewCtrl'
      })

      .state('onRoute', {
        url: '/on-route',
        cache: false,
        templateUrl: 'templates/onRoute.html',
        controller: 'onRouteCtrl'
      })

      .state('routeDetails', {
        url: '/route-details',
        templateUrl: 'templates/routeDetails.html',
        controller: 'routeDetailsCtrl'
      })
      .state('ads', {
        cache: false,
        url: '/ads',
        templateUrl: 'templates/adwares.html',
        controller: 'adsCtrl'
      });

    $urlRouterProvider.otherwise('login');

  });

angular.module('app.services', [])

.factory('BlankFactory', [function(){

}])


.factory('UserSession', [function () {
  return {
    setData: function (id, nombre) {
      window.localStorage['user-id'] = id;
      window.localStorage['nombre'] = nombre;
    },
    getData: function() {
      return window.localStorage['user-id'];
    },
    getName: function() {
      return window.localStorage['nombre'];
    },
    clearUserData: function() {
      window.localStorage.removeItem('user-id');
      window.localStorage.removeItem('nombre');
    }
  };
}])

.factory('S2R', [ function (){
    return {
        setEstateS2R: function (IC, DR, AR, LT, MC) {
            window.localStorage['S2R-IC'] = IC;
            window.localStorage['S2R-DR'] = DR;
            window.localStorage['S2R-AR'] = AR;
            window.localStorage['S2R-LT'] = LT;
            window.localStorage['S2R-MC'] = MC;
        },
        getEstateS2R_IC: function () {
            return window.localStorage['S2R-IC'];
        },
        getEstateS2R_DR: function () {
            return window.localStorage['S2R-DR'];
        },
        getEstateS2R_AR: function () {
            return window.localStorage['S2R-AR'];
        },
        getEstateS2R_LT: function () {
            return window.localStorage['S2R-LT'];
        },
        getEstateS2R_MC: function () {
            return window.localStorage['S2R-MC'];
        }
    };
}])

.factory('Alert', [function () {
  return {
    setAlert: function (type_alert,trip,lat,lon,valid,state,fn) {
      var currentdate = new Date();
      var datetime = currentdate.getFullYear() + "-"
          + (currentdate.getMonth()+1)  + "-"
          + currentdate.getDate() + " "
          + currentdate.getHours() + ":"
          + currentdate.getMinutes() + ":"
          + currentdate.getSeconds();
        var res = "";
          dataAlert = {
            'type_alert' : type_alert,
            'id_trip'    : trip,
            'lat'        : lat,
            'lon'        : lon,
            'validation' : valid,
            'state'      : state,
            'date'       : datetime
          };

          $.ajax({
            type: "POST",
            url: "http://startbluesoft.com/rideSafeApp/v1/index.php/alert",
            data: dataAlert,
            dataType: 'JSON',
            success: function (data) {
              if(data.error){
                fn(true);
              }else {
                fn(false);
              }
            },
            error: function(xhr, status, error) {
              console.log(xhr);
              console.log(status);
              fn(true);
            }
          });

    },
    getAlert: function () {

    }
  };
}])

.factory('dataUserRegister', [ function() {
  return {
    user: {}
  };
}])

.service('BlankService', [function(){

}]);

angular.module('app.controllers')
  .controller('discoverCtrl', ['$scope', '$stateParams', '$rootScope', '$state',
    function ($scope, $stateParams, $rootScope, $state) {

      $scope.routes = {};
      $scope.id_ruta = 0;

      $scope.speedw = [
        { speedway: 1, speedwayName: 'Si' },
        { speedway: 0, speedwayName: 'No' }
      ];

      $.ajax({
        type: 'GET',
        crossDomain: true,
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/state',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            var estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_estado + '">' + item.nombre + '</option>';
            });
            $('#states').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener los estados');
        }
      });

      $.ajax({
        type: 'GET',
        crossDomain: true,
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/thematic',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_tematica + '">' + item.nombre + '</option>';
            });
            $('#thematics').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener las tematicas');
        }
      });

      $.ajax({
        type: 'POST',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
        data: { query: 'SELECT * FROM descubrir_ruta' },
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.concentracion + '">' + item.concentracion + '</option>';
            });
            $('#concentra').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener las concentraciones');
        }
      });


      $scope.filter = function () {
        var query = 'SELECT * FROM descubrir_ruta';

        if ($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null || $('select[id=speedway]').val() != null || $('select[id=states]').val() != null)
          query += ' WHERE';

        if ($('select[id=thematics]').val() != null)
          query += ' id_tematica = ' + $('select[id=thematics').val();

        if ($('select[id=concentra]').val() != null && $('select[id=thematics]').val() != null)
          query += ' AND';

        if ($('select[id=concentra]').val() != null)
          query += ' concentracion = "' + $('select[id=concentra').val() + '"';

        if (($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null) && ($('select[id=speedway]').val() != null))
          query += ' AND';

        if ($('select[id=speedway]').val() != null)
          query += ' pista_carrera = ' + $('select[id=speedway').val().substring(7);

        if (($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null || $('select[id=speedway]').val() != null) && $('select[id=states]').val() != null)
          query += ' AND';

        if ($('select[id=states]').val() != null)
          query += ' id_estado = ' + $('select[id=states]').val();

        $.ajax({
          type: 'POST',
          url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
          data: { query: query },
          dataType: 'json',
          success: function (data) {
            if (data.error) {
              alert(data.message);
            } else if (!data.error) {
              console.log(data.message);
              $scope.id_ruta = 0;
              $scope.routes = JSON.parse(data.message);
              $scope.$apply();
              $('.results-list-item').click(function () {
                $('.results-list-item').removeClass('active');
                $(this).addClass('active');
              });
            }
          },
          error: function (xhr, status, error) {
            console.log(xhr.responseText);
            alert('No se pudieron obtener los destinos');
          }
        });
        console.log(query);
      };

      $scope.select_item = function (item) {
        $scope.id_ruta = item;
      };

      $scope.road = function () {

        if ($scope.id_ruta != 0) {
          var query = 'SELECT * FROM descubrir_ruta WHERE id_descubrir_ruta = ' + $scope.id_ruta;
          $.ajax({
            type: 'POST',
            url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
            data: { query: query },
            dataType: 'json',
            success: function (data) {
              if (data.error) {
                alert(data.message);
              } else if (!data.error) {
                var coord = JSON.parse(data.message);
                $rootScope.destination = {
                  lat: coord[0].altDes,
                  lng: coord[0].latDes
                };
                if (navigator.geolocation) {
                  navigator.geolocation.getCurrentPosition(function (position) {
                    $scope.$apply(function () {
                      $rootScope.origin = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                      };
                      $state.go('routeReview');
                    });
                  });
                } else {
                  alert('Por favor, enciende tu GPS');
                }
              }
            },
            error: function (xhr, status, error) {
              console.log(xhr.responseText);
              alert('No se pudieron obtener las concentraciones');
            }
          });
        } else {
          alert('No haz seleccionado ningun ruta');
        }
      };


    }])
angular.module('app.controllers')
  .controller('homeCtrl', ['$scope', '$stateParams', '$log', '$rootScope', '$ionicPopup', '$ionicPlatform', '$state', '$cordovaGeolocation',
    function ($scope, $stateParams, $log, $rootScope, $ionicPopup, $ionicPlatform, $state, $cordovaGeolocation) {

      $scope.positions = {
        lat: 0,
        lng: 0
      };

      $scope.disabled = true;
      $scope.watcher = null;

      $scope.drawMap = function (position) {
        $scope.positions.lat = position.coords.latitude;
        $scope.positions.lng = position.coords.longitude;

        $scope.markerDestination = {
          id: 1,
          coords: {
            latitude: $scope.positions.lat,
            longitude: $scope.positions.lng
          },
          options: {
            draggable: true,
            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          },
          events: {
            dragend: function (markerDestination, eventName, args) {
              $rootScope.destination = {
                lat: markerDestination.getPosition().lat(),
                lng: markerDestination.getPosition().lng()
              };

              var latlngd = new google.maps.LatLng($rootScope.destination.lat, $rootScope.destination.lng);

              foo(latlngd, function (locationd) {
                $('#destination').val(locationd);
                getDirections();
              });
              $scope.markerDestination.options = {
                draggable: true,
                labelAnchor: '100 0',
                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                labelClass: 'marker-labels'
              };
            }
          }
        };

        $scope.marker = {
          id: 0,
          coords: {
            latitude: $scope.positions.lat,
            longitude: $scope.positions.lng
          },
          options: {
            draggable: true,
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          },
          events: {
            dragend: function (marker, marked, eventName, args) {
              $rootScope.origin = {
                lat: marker.getPosition().lat(),
                lon: marker.getPosition().lng()
              };

              if ($('#home-inputDestination').is(':hidden')) {
                var latlngd = new google.maps.LatLng(($rootScope.origin.lat), $rootScope.origin.lng);
                $scope.markerDestination.coords.latitude = $rootScope.origin.lat;
                $scope.markerDestination.coords.longitude = $rootScope.origin.lng;
              }

              var latlng = new google.maps.LatLng($rootScope.origin.lat, $rootScope.origin.lng);

              foo(latlng, function (location) {
                $('#origin').val(location);
                $('#home-inputDestination').show();

                if ($('#destination').val() === '') {
                } else {
                  getDirections();
                }
              });
              $scope.marker.options = {
                draggable: true,
                labelAnchor: '100 0',
                icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                labelClass: 'marker-labels'
              };
            }
          }
        };


        $scope.map = {
          control: {},
          center: {
            latitude: $scope.positions.lat,
            longitude: $scope.positions.lng
          },
          zoom: 15,
          refresh: true,
          options: {
            panControl: false,
            zoomControl: false,
            mapTypeControl: false,
            disableDefaultUI: true,
            scrollwheel: false
          }
        };
      };

      // Confirmar participaci√≥n en caravana
      function showConfirmPopup() {
        var confirmPopup = $ionicPopup.confirm({
          title: 'Caravana de Carlos',
          template: '¬øQuieres participar en la caravana del usuario?'
        });

        confirmPopup.then(function (res) {
          if (res) {
            $rootScope.onCaravana = true;
            $rootScope.origin = {
              lat: 20.1010608, lng: -98.75913109999999
            };
            $rootScope.destination = {
              lat: 19.4326077, lng: -99.13320799999997
            };
            $state.go('onRoute');
            // $.ajax({
            //   type: 'POST',
            //   url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/invitation/aceptar',
            //   success: function(data){
            //     console.log(data);
            //   }
            // });
          } else {
            // $.ajax({
            //   type: 'POST',
            //   url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/invitation/reject',
            //   success: function(data){
            //     console.log(data);
            //   }
            // });
          }
        });
      }

      function watchLocation() {
        var options = { maximumAge: 5000, timeout: 5000, enableHighAccuracy: false };
        $cordovaGeolocation.getCurrentPosition(options)
          .then(function (position) {
            console.log(position);
            $scope.drawMap(position);
            $scope.markerPosition = {
              id: 10,
              coords: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }
            };
          }, function (error) {
            console.log(error.code);
            console.log(error.message);
          });
        $scope.watcher = setInterval(function () {
          $cordovaGeolocation.getCurrentPosition(options)
            .then(function (position) {
              console.log(position);
              $scope.drawMap(position);
              $scope.markerPosition = {
                id: 10,
                coords: {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude
                }
              };
            }, function (error) {
              console.log(error.code);
              console.log(error.message);
            });
        }, 5000);
      }

      $scope.$on('$ionicView.enter', function () {
        watchLocation();

      });

      $scope.$on('$ionicView.leave', function () {
        clearInterval($scope.watcher);
        $scope.watcher = null;
      });

      $ionicPlatform.ready(function () {
        // var watchOptions = { maximumAge: 3000, timeout: 3000, enableHighAccuracy: false };
        // $scope.watcher = $cordovaGeolocation.watchPosition(watchOptions).then(null,
        //   function (error) {
        //     console.log(error);
        //   },
        //   function (position) {
        //     $scope.markerPosition = {
        //       id: 10,
        //       coords: {
        //         latitude: position.coords.latitude,
        //         longitude: position.coords.longitude
        //       }
        //     };
        //   });
      });

      $scope.enterPressed = function (event, callback) {
        if (event.keyCode === 13) {
          callback();
        }
        if ($('#origin').val() !== '' && $('#destination').val() !== '') {
          $scope.disabled = false;
        } else {
          $scope.disabled = true;
        }
      };



      $scope.blurred = function () {
        if ($('#origin').val() != '') {
          getCoordinates($('#origin').val(), function (coord) {
            $scope.marker.coords.latitude = coord[0].geometry.location.lat();
            $scope.marker.coords.longitude = coord[0].geometry.location.lng();
            $rootScope.origin = {
              lat: coord[0].geometry.location.lat(),
              lng: coord[0].geometry.location.lng()
            };
            $scope.map.center = {
              latitude: coord[0].geometry.location.lat(),
              longitude: coord[0].geometry.location.lng()
            };

            if ($('#home-inputDestination').is(':hidden')) {
              $('#home-inputDestination').show();
              var latlngd = new google.maps.LatLng((coord[0].geometry.location.lat() - 0.002971573), coord[0].geometry.location.lng());
              $scope.markerDestination.coords.latitude = (coord[0].geometry.location.lat() - 0.002971573);
              $scope.markerDestination.coords.longitude = coord[0].geometry.location.lng();
            }

            if ($('#destination').val() != '') {
              getDirections();
            }
          });
        } else {
          console.log('vacio');
        }
      };

      $scope.blurredd = function () {
        if ($('#destination').val() != '') {
          getCoordinates($('#destination').val(), function (coord) {
            $scope.markerDestination.coords.latitude = coord[0].geometry.location.lat();
            $scope.markerDestination.coords.longitude = coord[0].geometry.location.lng();
            $rootScope.destination = {
              lat: coord[0].geometry.location.lat(),
              lng: coord[0].geometry.location.lng()
            };
            $scope.map.center = {
              latitude: coord[0].geometry.location.lat(),
              longitude: coord[0].geometry.location.lng()
            };
            getDirections();
          });
        } else {
          console.log('vacio');
        }
      };

      $('#home-inputDestination').hide();

      $scope.type_poi = 0;


      $scope.polylines = [];

      function foo(latlng, fn) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
              fn(results[0].formatted_address);
            } else {
              fn('Location not found');
            }
          } else {
            fn('Geocoder failed due to: ' + status);
          }
        });
      }

      function getRoute(start, end, poi, fn) {
        var data = {};
        data.start = start;
        data.end = end;
        data.key = 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc';
        data.poi_in = [poi];
        data.weather = true;
        $.ajax({
          crossDomain: true,
          type: 'GET',
          url: 'https://api.sintrafico.com/route',
          data: data,
          headers: { 'X-Requested-With': 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc' },
          success: function (e) {
            fn(e);
          }
        });
      }

      function getDirections() {
        getRoute($scope.marker.coords.latitude + ',' + $scope.marker.coords.longitude, $scope.markerDestination.coords.latitude + ',' + $scope.markerDestination.coords.longitude, $scope.type_poi, function (wps) {
          var wp = [];
          for (var i = 0; i < wps.routes[0].geometry.coordinates.length; i++) {
            wp.push({
              latitude: wps.routes[0].geometry.coordinates[i][1],
              longitude: wps.routes[0].geometry.coordinates[i][0]
            });
          }
          $scope.polylines = [{
            id: 1,
            path: wp,
            stroke: {
              color: '#223D75',
              weight: 5
            },
            editable: true,
            draggable: true,
            geodesic: true,
            visible: true
          }];
          $scope.vm.markers = [];
          if (wps.routes[0].pois) {
            $scope.getIncident();
          }
          // $scope.$apply();
        });
      }

      function getCoordinates(address, fn) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ address: address }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            fn(results);
          } else {
            fn('Location not found');
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }

      $scope.getIncident = function () {
        $scope.type_poi = 3;
        getRoute($scope.marker.coords.latitude + ',' + $scope.marker.coords.longitude, $scope.markerDestination.coords.latitude + ',' + $scope.markerDestination.coords.longitude, $scope.type_poi, function (wps) {
          $scope.vm.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.incidents.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.incidents[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.incidents[i].geometry.coordinates[0],
                name: wps.routes[0].pois.incidents[i].description + '<br /	>' + wps.routes[0].pois.incidents[i].address,
                show: false,
                icon: './img/pines/accidente-grave.png'
              };
              $scope.vm.markers.push(mark);
            }
            // $scope.$apply();
          }
        });
      };

      $scope.vm = [];

      $scope.vm.markers = [];

      $scope.back = function () { }



    }]);
angular.module('app.controllers')
  .controller('loginCtrl', ['$scope', '$stateParams', '$state', 'UserSession',
    function ($scope, $stateParams, $state, UserSession) {
      if (UserSession.getData()) {
        $state.go('menu.home');
        return;
      }
      $scope.formData = {};
      $scope.login = function () {
        var email = $('#emailLogin').val().trim();
        var password = $('#passwordLogin').val();
        if (email == '') {
          alert('Por favor, ingresa tu correo');
        } else {
          var valid = /^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/;
          var validcor = new RegExp(valid);
          var matchArray = email.match(validcor);
          if (matchArray == null) {
            alert('Por favor, ingresa un correo valido');
          } else {
            if (password == '') {
              alert('Por favor, ingresa tu contrase√±a');
            } else {
              var parametros = {
                'email': email,
                'password': password
              };
              $.ajax({
                type: 'POST',
                url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/userlogin',
                data: parametros,
                dataType: 'json',
                success: function (data) {
                  if (data.error) {
                    alert(data.message);
                  } else if (!data.error) {
                    UserSession.setData(data.id, data.nombre);
                    $state.go('menu.home');
                  }
                },
                error: function (xhr, status, error) {
                  console.log(xhr.responseText);
                  alert('No se pudo iniciar sesi√≥n, int√©ntalo m√°s tarde');
                }
              });
            }
          }
        }
      };

      $scope.pressEnter = function (e) {
        if (e.keyCode === 13) {
          $scope.login();
          $('input').blur();
        }
      };

      $scope.signUp = function () {
        $state.go('userRegister');
      };

    }]);
angular.module('app.controllers')
  .controller('menuCtrl', ['$scope', '$stateParams', '$state', 'UserSession', '$ionicPlatform', '$cordovaGeolocation',
    function ($scope, $stateParams, $state, UserSession, $ionicPlatform, $cordovaGeolocation) {
      // if (!UserSession.getData()) {
      //   $state.go('login');
      //   return;
      // }
      $scope.name = '';

      $scope.logout = function () {
        UserSession.clearUserData();
        $state.go('login');
      };

      $scope.$on('$ionicView.enter', function () {
        $scope.name = UserSession.getName();

        // setTimeout(() => {
        //   showConfirmPopup();
        // }, 3000);  

      });

      $ionicPlatform.ready(function () {
        var watchOptions = { maximumAge: 3000, timeout: 3000, enableHighAccuracy: false };
        $cordovaGeolocation.watchPosition(watchOptions).then(null,
          function (error) {
            console.log(error);
          },
          function (position) {
            $scope.markerPosition = {
              id: 10,
              coords: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }
            };
          });
      });

      


    }]);
angular.module('app.controllers').
  controller('myRoutesCtrl', ['$scope', '$state', '$rootScope',
    function ($scope, $state, $rootScope) {

      $(".routes-list-item").click(function () {
        $(".routes-list-item").removeClass("active");
        $(this).addClass("active");
      });

      $scope.list = [];

      delete $rootScope.lat;
      delete $rootScope.latd;
      delete $rootScope.lon;
      delete $rootScope.lond;

      $.ajax({
        type: "GET",
        url: "http://startbluesoft.com/rideSafeApp/v1/index.php/routes",
        dataType: "json",
        success: function (data) {
          $.each(data, function (i, j) {
            var newItem = {};
            newItem.name = j.nombre;
            newItem.id = j.id_ruta;
            newItem.amount = j.gasto;
            newItem.speed = j.velocidad;
            newItem.time = j.tiempo_viaje;
            newItem.km = j.distancia;
            newItem.lon = j.altOrig;
            newItem.lond = j.altDes;
            newItem.lat = j.latOrig;
            newItem.latd = j.latDes;
            $scope.list.push(newItem);
            $scope.$apply();
            delete newItem;
          })
        },
        error: function (xhr, status, error) {
          console.log("Error getting my routes");
        }
      });

      $scope.showItemInfo = function (item) {
        $rootScope.lat = item.lat;
        $rootScope.latd = item.latd;
        $rootScope.lon = item.lon;
        $rootScope.lond = item.lond;
        $("#myRoutes-markdown10").html('<p style="color:#FFFFFF; text-align:center;">'
          + '  <strong>Detalles de viaje</strong>'
          + '</p>'
          + '<div style="text-align:left;">'
          + '  <img class="my-routes-imgs" src="img/my_routes_sample.jpg">'
          + '</div>'
          + '<div class="my-routes-text">'
          + '  <p>'
          + '    Tiempo total del viaje: ' + item.time + ''
          + '    <br>'
          + '    Km recorridos: ' + item.km + ' km'
          + '    <br>'
          + '    Gasto casetas: $' + item.amount + ''
          + '    <br>'
          + '    Velocidad promedio: ' + item.speed + ' km/hr'
          + '  </p>'
          + '</div>');
      }

      $scope.startRoute = function () {
        if (
          !$rootScope.lat ||
          !$rootScope.latd ||
          !$rootScope.lon ||
          !$rootScope.lond ||
          $rootScope.lat == 0 ||
          $rootScope.lon == 0 ||
          $rootScope.latd == 0 ||
          $rootScope.lond == 0) {
          alert("Debes seleccionar una ruta");
        } else {
          $("#myRoutes-markdown10").html('');
          $state.go('onRoute');
        }
      }

    }]);
angular.module('app.controllers')
  .controller('onRouteCtrl', ['$scope', '$stateParams', '$ionicPopover', '$rootScope', '$ionicPlatform', '$cordovaGeolocation',
    function ($scope, $stateParams, $ionicPopover, $rootScope, $ionicPlatform, $cordovaGeolocation) {

      $scope.vmo = [];
      $scope.vmo.markers = [];
      $scope.polylineso = [];
      $scope.watcher = null;

      $scope.$on('$ionicView.enter', function () {
        $scope.map = {
          control: {},
          center: { latitude: $rootScope.origin.lat, longitude: $rootScope.origin.lng },
          zoom: 15,
          options: {
            panControl: false,
            zoomControl: true,
            mapTypeControl: false,
            disableDefaultUI: true,
            scrollwheel: false
          }
        };

        $scope.markerOrigin = {
          id: 0,
          coords: {
            latitude: $rootScope.origin.lat,
            longitude: $rootScope.origin.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          }
        };

        $scope.markerDestination = {
          id: 0,
          coords: {
            latitude: $rootScope.destination.lat,
            longitude: $rootScope.destination.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          }
        };

        getRoute(function (wps) {
          var wp = [];
          for (var i = 0; i < wps.routes[0].geometry.coordinates.length; i++) {
            wp.push({
              latitude: wps.routes[0].geometry.coordinates[i][1],
              longitude: wps.routes[0].geometry.coordinates[i][0]
            });
          }
          $scope.polylineso = [{
            id: 1,
            path: wp,
            stroke: {
              color: '#223D75',
              weight: 5
            },
            editable: true,
            draggable: true,
            geodesic: true,
            visible: true
          }];
          $scope.$apply();
        });

      });

      $scope.$on('$ionicView.leave', function () {
        $cordovaGeolocation.clearWatch($scope.watcher);
        $scope.watcher = null;
      });

      $ionicPlatform.ready(function () {
        var watchOptions = { maximumAge: 3000, timeout: 3000, enableHighAccuracy: false };
        $scope.watcher = $cordovaGeolocation.watchPosition(watchOptions).then(null,
          function (error) {
            console.log(error);
          },
          function (position) {
            $scope.markerPosition = {
              id: 10,
              coords: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }
            };
          });
      });


      // Function to close the alerts menu if clicked anywhere in the view
      $(document).click(function (evt) {
        if (evt.target.id == 'nav-trigger') {
          return;
        }
        if ($('input[name="nav-trigger"]').is(':checked')) {
          $('input[name="nav-trigger"]').prop('checked', false);
        }
      });

      $('input[name="nav-trigger"]').click(function () {
        event.stopPropagation();
      });

      // .fromTemplate() method
      var template = '<ion-popover-view style="top: 25% !important;"><ion-content> Hola! </ion-content></ion-popover-view>';
      $scope.popover = $ionicPopover.fromTemplate(template, {
        scope: $scope
      });
      // .fromTemplateUrl() method
      $ionicPopover.fromTemplateUrl('stops-route-confirm.html', {
        scope: $scope
      }).then(function (popover) {
        $scope.popover = popover;
      });


      $scope.openPopover = function ($event) {
        $scope.popover.show($event);
      };
      $scope.closePopover = function () {
        $scope.popover.hide();
      };
      //Cleanup the popover when we're done with it!
      $scope.$on('$destroy', function () {
        $scope.popover.remove();
      });

      function getRoute(fn) {
        var data = {};
        data.start = $rootScope.origin.lat + ',' + $rootScope.origin.lng;
        data.end = $rootScope.destination.lat + ',' + $rootScope.destination.lng;
        data.poi_in = [$scope.type_poi];
        data.weather = true;
        $.ajax({
          crossDomain: true,
          type: 'GET',
          url: 'https://api.sintrafico.com/route',
          data: data,
          headers: { 'X-Requested-With': 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc' },
          success: function (e) {
            fn(e);
          }
        });
      }


    }]);
angular.module('app.controllers')
  .controller('routeDetailsCtrl', ['$scope', '$stateParams', '$ionicPopup',
    function ($scope, $stateParams, $ionicPopup) {

      $scope.saved = false;

      $scope.saveRoute = function () {
        var alertPopup = $ionicPopup.alert({
          title: 'Guardar ruta',
          template: 'La ruta se ha guardado'
        });

        // C√≥digo para guardar la ruta

        alertPopup.then(function (res) {
          console.log('Thank you for not eating my delicious ice cream cone');
        });
      };
    }]);
angular.module('app.controllers')
  .controller('routeReviewCtrl', ['$scope', '$stateParams', '$rootScope', '$state', '$ionicPlatform', '$cordovaGeolocation',
    function ($scope, $stateParams, $rootScope, $state, $ionicPlatform, $cordovaGeolocation) {

      $scope.type_poi = 0;

      $scope.$on('$ionicView.enter', function () {

        $scope.mapr = {
          control: {},
          center: { latitude: $rootScope.origin.lat, longitude: $rootScope.origin.lng },
          zoom: 15,
          options: {
            panControl: false,
            zoomControl: true,
            mapTypeControl: false,
            disableDefaultUI: true,
            scrollwheel: false
          }
        };

        $scope.markerr = {
          id: 0,
          coords: {
            latitude: $rootScope.origin.lat,
            longitude: $rootScope.origin.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          }
        };

        $scope.markerdr = {
          id: 0,
          coords: {
            latitude: $rootScope.destination.lat,
            longitude: $rootScope.destination.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          }
        };

        getRoute(function (wps) {
          console.log(wps);
          var wp = [];
          for (var i = 0; i < wps.routes[0].geometry.coordinates.length; i++) {
            wp.push({
              latitude: wps.routes[0].geometry.coordinates[i][1],
              longitude: wps.routes[0].geometry.coordinates[i][0]
            });
          }
          $scope.polylinesr = [{
            id: 1,
            path: wp,
            stroke: {
              color: '#223D75',
              weight: 5
            },
            editable: true,
            draggable: true,
            geodesic: true,
            visible: true
          }];
          //$scope.vmr.markers = [];
          // if(wps.routes[0].pois){
          //   if($scope.type_poi == 1){
          //     $scope.getToll();
          //   }
          //   else if($scope.type_poi == 2){
          //     $scope.getGas();
          //   }
          //   else {
          //     $scope.getIncident();
          //   }
          // }
          $scope.$apply();
        });

      });

      function getRoute(fn) {
        var data = {};
        data.start = $rootScope.origin.lat + ',' + $rootScope.origin.lng;
        data.end = $rootScope.destination.lat + ',' + $rootScope.destination.lng;
        data.poi_in = [$scope.type_poi];
        data.weather = true;
        $.ajax({
          crossDomain: true,
          type: 'GET',
          url: 'https://api.sintrafico.com/route',
          data: data,
          headers: { 'X-Requested-With': 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc' },
          success: function (e) {
            fn(e);
          }
        });
      }

      $scope.getGas = function () {
        $scope.type_poi = 2;
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.gas_stations.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.gas_stations[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.gas_stations[i].geometry.coordinates[0],
                name: wps.routes[0].pois.gas_stations[i].description + '<br /	>' + wps.routes[0].pois.gas_stations[i].address + '<br /	>' + wps.routes[0].pois.gas_stations[i].status,
                show: false,
                icon: gasType(wps.routes[0].pois.gas_stations[i].status)
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getIncident = function () {
        $scope.type_poi = 3;
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.incidents.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.incidents[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.incidents[i].geometry.coordinates[0],
                name: wps.routes[0].pois.incidents[i].description + '<br /	>' + wps.routes[0].pois.incidents[i].address,
                show: false,
                icon: './img/pines/accidente-grave.png'
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getToll = function () {
        $scope.type_poi = 1;
        getRoute(function (wps) {
          console.log(wps);
          $scope.vmr.markers = [];
          if (wps.routes[0].pois.tolls) {
            for (var i = 0; i < wps.routes[0].pois.tolls.length; i++) {
              var cost = 'Costo: ';
              wps.routes[0].pois.tolls[i].rates[0][4] ? cost = cost + wps.routes[0].pois.tolls[i].rates[0][4] : cost = cost + '-';
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.tolls[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.tolls[i].geometry.coordinates[0],
                name: wps.routes[0].pois.tolls[i].description + '<br /	>' + wps.routes[0].pois.tolls[i].address + '<br /	>' + 'Costo: ' + wps.routes[0].pois.tolls[i].rates[4],
                show: false,
                icon: './img/pines/caseta.png'
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getWeather = function () {
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].legs) {
            console.log(wps.routes[0].legs[0].steps);
            for (var i = 1; i < wps.routes[0].legs[0].steps.length; i++) {
              //console.log(wps.routes[0].legs[0].steps[i].weather.main.temp);
              if (wps.routes[0].legs[0].steps[i].weather) {
                var mark = {
                  id: i,
                  latitude: wps.routes[0].legs[0].steps[i].geometry.coordinates[0][1],
                  longitude: wps.routes[0].legs[0].steps[i].geometry.coordinates[0][0],
                  name: 'Temperatura: ' + (wps.routes[0].legs[0].steps[i].weather.main.temp - 273.15) + '¬∞C' + '<br />' + 'Clima: ' + wps.routes[0].legs[0].steps[i].weather.weather[0].description,
                  show: false,
                  icon: './img/pines/soleado.png'
                };
                $scope.vmr.markers.push(mark);
              }
            }
            $scope.$apply();
          }
        });
      };

      $scope.vmr = [];

      $scope.vmr.markers = [];

      function gasType(status) {
        if (status == 'Con anomal√≠as' || status == 'Se neg√≥ a verificaci√≥n') {
          url = './img/pines/gas-rojo.png';
        } else if (status == 'No verificada') {
          url = './img/pines/gas-naranja.png';
        } else {
          url = './img/pines/gas-verde.png';
        }
        return url;
      }

      $scope.back = function () {
        $state.go('menu.home');
      };

      $scope.polylinesr = [];

      function watchLocation() {
        var options = { maximumAge: 0, timeout: 5000, enableHighAccuracy: true };
        $cordovaGeolocation.getCurrentPosition(options)
          .then(function (position) {
            console.log(position);
            $scope.drawMap(position);
            $scope.markerPosition = {
              id: 10,
              coords: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }
            };
          }, function (error) {
            console.log(error.code);
            console.log(error.message);
          });
        $scope.watcher = setInterval(function () {
          $cordovaGeolocation.getCurrentPosition(options)
            .then(function (position) {
              console.log(position);
              $scope.drawMap(position);
              $scope.markerPosition = {
                id: 10,
                coords: {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude
                }
              };
            }, function (error) {
              console.log(error.code);
              console.log(error.message);
            });
        }, 5000);
      }

      $ionicPlatform.ready(function () {
        watchLocation();
      });

    }]);
angular.module('app.controllers')
  .controller('caravanaCtrl', ['$scope', '$state',
    function ($scope, $state) {

      $.ajax({
        type: 'GET',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/amigos/activos',
        // dataType: 'json',
        success: function(users){
          $.each(users, function(index, user) {
            $scope.users.push({
              name: user.name,
              selected: false,
              id: user.id
            });

          });
        }
      });

      $scope.seleccionados = 0;

      $scope.changedUser = function () {
        $scope.seleccionados = $scope.users.filter(function(user) {
          return user.selected;
        }).length;
        if ($scope.seleccionados >= 20) {
          $scope.disabledUsers = true;
        } else {
          $scope.disabledUsers = false;
        }
      };


      $scope.sendInvitations = function () {
        $state.go('menu.caravanaDestination');
      };


    }]);
var $;
angular.module('app.controllers')
  .controller('caravanaCreateRouteCtrl', ['$scope', '$stateParams', '$log', '$rootScope', '$ionicHistory', '$cordovaGeolocation',
    function ($scope, $stateParams, $log, $rootScope, $ionicHistory, $cordovaGeolocation) {

      $scope.disabled = true;
      $scope.positions = {
        lat: 0,
        lng: 0
      };

      $scope.type_poi = 0;

      function foo(latlng, fn) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
              fn(results[0].formatted_address);
            } else {
              fn('Location not found');
            }
          } else {
            fn('Geocoder failed due to: ' + status);
          }
        });
      }

      function getRoute(start, end, poi, fn) {
        var data = {};
        data.start = start;
        data.end = end;
        data.key = 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc';
        data.poi_in = [poi];
        data.weather = true;
        $.ajax({
          crossDomain: true,
          type: 'GET',
          url: 'https://api.sintrafico.com/route',
          data: data,
          headers: { 'X-Requested-With': 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc' },
          success: function (e) {
            fn(e);
          }
        });
      }

      function getDirections() {
        getRoute($scope.markerOrigin.coords.latitude + ',' + $scope.markerOrigin.coords.longitude, $scope.markerDestination.coords.latitude + ',' + $scope.markerDestination.coords.longitude, $scope.type_poi, function (wps) {
          var wp = [];
          for (var i = 0; i < wps.routes[0].geometry.coordinates.length; i++) {
            wp.push({
              latitude: wps.routes[0].geometry.coordinates[i][1],
              longitude: wps.routes[0].geometry.coordinates[i][0]
            });
          }
          $scope.polylines = [{
            id: 1,
            path: wp,
            stroke: {
              color: '#223D75',
              weight: 5
            },
            editable: true,
            draggable: true,
            geodesic: true,
            visible: true
          }];
          $scope.vm.markers = [];
          if (wps.routes[0].pois) {
            $scope.getIncident();
          }
          $scope.$apply();
        });
      }

      function getCoordinates(address, fn) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ address: address }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            fn(results);
          } else {
            fn('Location not found');
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }

      function drawMap(position) {
        $scope.positions.lng = position.coords.longitude;
        $scope.positions.lat = position.coords.latitude;

        $scope.markerDestination = {
          id: 1,
          coords: {
            latitude: $scope.positions.lat,
            longitude: $scope.positions.lng
          },
          options: {
            draggable: true,
            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          },
          events: {
            dragend: function (marker) {
              $rootScope.destination.lat = marker.getPosition().lat();
              $rootScope.destination.lng = marker.getPosition().lng();

              var latlngd = new google.maps.LatLng($rootScope.destination.lat, $rootScope.destination.lng);

              foo(latlngd, function (locationd) {
                $('#inputDestination').val(locationd);
                getDirections();
              });
              $scope.markerDestination.options = {
                draggable: true,
                labelAnchor: '100 0',
                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                labelClass: 'marker-labels'
              };
            }
          }
        };

        $scope.markerOrigin = {
          id: 0,
          coords: {
            latitude: $scope.positions.lat,
            longitude: $scope.positions.lng
          },
          options: {
            draggable: true,
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          },
          events: {
            dragend: function (marker) {
              $rootScope.origin.lat = marker.getPosition().lat();
              $rootScope.origin.lng = marker.getPosition().lng();

              if ($('#home-inputDestination').is(':hidden')) {
                var latlngd = new google.maps.LatLng(($rootScope.origin.lat), $rootScope.origin.lng);
                $scope.markerDestination.coords.latitude = ($rootScope.origin.lat);
                $scope.markerDestination.coords.longitude = $rootScope.origin.lng;
              }

              var latlng = new google.maps.LatLng($rootScope.origin.lat, $rootScope.origin.lng);

              foo(latlng, function (location) {
                $('#inputOrigin').val(location);
                $('#home-inputDestination').show();

                if ($('#inputDestination').val() === '') {
                } else {
                  getDirections();
                }
              });
              $scope.markerOrigin.options = {
                draggable: true,
                labelAnchor: '100 0',
                icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                labelClass: 'marker-labels'
              };
            }
          }
        };

        $scope.map = {
          control: {},
          center: { latitude: $scope.positions.lat, longitude: $scope.positions.lng },
          zoom: 15,
          options: {
            panControl: false,
            zoomControl: false,
            mapTypeControl: false,
            disableDefaultUI: true,
            scrollwheel: false
          }
        };
      }

      $scope.$on('$ionicView.loaded', function () {
        $('#home-inputDestination').hide();
      });

      $scope.$on('$ionicView.enter', function () {
        var options = { maximumAge: 0, timeout: 5000, enableHighAccuracy: true };
        $cordovaGeolocation.getCurrentPosition(options)
          .then(function (position) {
            drawMap(position);
          }, function (error) {
            console.log(error.code);
            console.log(error.message);
          });
      });

      $scope.enterPressed = function (e, callback) {
        if (e.keyCode === 13) {
          callback();
        }
        if ($('#inputOrigin').val() !== '' && $('#inputDestination').val() !== '') {
          $scope.disabled = false;
        } else {
          $scope.disabled = true;
        }
      };

      $scope.markerOriginChanged = function () {
        if ($('#inputOrigin').val() !== '') {
          getCoordinates($('#inputOrigin').val(), function (coord) {
            $scope.markerOrigin.coords.latitude = coord[0].geometry.location.lat();
            $scope.markerOrigin.coords.longitude = coord[0].geometry.location.lng();
            $rootScope.origin = {
              lat: coord[0].geometry.location.lat(),
              lng: coord[0].geometry.location.lng()
            };
            $scope.map.center = {
              latitude: coord[0].geometry.location.lat(),
              longitude: coord[0].geometry.location.lng()
            };

            if ($('#home-inputDestination').is(':hidden')) {
              $('#home-inputDestination').show();
              // var latlngd = new google.maps.LatLng((coord[0].geometry.location.lat() - 0.002971573), coord[0].geometry.location.lng());
              $scope.markerDestination.coords.latitude = (coord[0].geometry.location.lat() - 0.002971573);
              $scope.markerDestination.coords.longitude = coord[0].geometry.location.lng();
            }

            if ($('#inputDestination').val() != '') {
              getDirections();
            }
          });
        } else {
          console.log('vacio');
        }
      };

      $scope.markerDestinationChanged = function () {
        if ($('#inputDestination').val() !== '') {
          getCoordinates($('#inputDestination').val(), function (coord) {
            $scope.markerDestination.coords.latitude = coord[0].geometry.location.lat();
            $scope.markerDestination.coords.longitude = coord[0].geometry.location.lng();
            $rootScope.destination = {
              lat: coord[0].geometry.location.lat(),
              lng: coord[0].geometry.location.lng()
            };
            $scope.map.center = {
              latitude: coord[0].geometry.location.lat(),
              longitude: coord[0].geometry.location.lng()
            };
            getDirections();
          });
        } else {
          console.log('vacio');
        }
      };

      $scope.polylines = [];

      $scope.getIncident = function () {
        $scope.type_poi = 3;
        getRoute($scope.markerOrigin.coords.latitude + ',' + $scope.markerOrigin.coords.longitude, $scope.markerDestination.coords.latitude + ',' + $scope.markerDestination.coords.longitude, $scope.type_poi, function (wps) {
          $scope.vm.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.incidents.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.incidents[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.incidents[i].geometry.coordinates[0],
                name: wps.routes[0].pois.incidents[i].description + '<br /	>' + wps.routes[0].pois.incidents[i].address,
                show: false,
                icon: './img/pines/accidente-grave.png'
              };
              $scope.vm.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.vm = [];

      $scope.vm.markers = [];

      $scope.goBack = function () {
        $ionicHistory.goBack();
      };

    }]);
angular.module('app.controllers')
  .controller('discoverRouteCaravanaCtrl', ['$scope', '$stateParams', '$rootScope', '$state',
    function ($scope, $stateParams, $rootScope, $state) {

      $scope.routes = {};
      $scope.id_ruta = 0;

      $scope.speedw = [
        { speedway: 1, speedwayName: 'Si' },
        { speedway: 0, speedwayName: 'No' }
      ];

      $.ajax({
        type: 'GET',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/state',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            var estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_estado + '">' + item.nombre + '</option>';
            });
            $('#states').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener los estados');
        }
      });

      $.ajax({
        type: 'GET',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/thematic',
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.id_tematica + '">' + item.nombre + '</option>';
            });
            $('#thematics').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener las tematicas');
        }
      });

      $.ajax({
        type: 'POST',
        url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
        data: { query: 'SELECT * FROM descubrir_ruta' },
        dataType: 'json',
        success: function (data) {
          if (data.error) {
            alert(data.message);
          } else if (!data.error) {
            estados = JSON.parse(data.message);
            var toAppend = '';
            $.each(estados, function (i, item) {
              toAppend += '<option value="' + item.concentracion + '">' + item.concentracion + '</option>';
            });
            $('#concentra').append(toAppend);
          }
        },
        error: function (xhr, status, error) {
          console.log(xhr.responseText);
          alert('No se pudieron obtener las concentraciones');
        }
      });


      $scope.filter = function () {
        var query = 'SELECT * FROM descubrir_ruta';

        if ($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null || $('select[id=speedway]').val() != null || $('select[id=states]').val() != null)
          query += ' WHERE';

        if ($('select[id=thematics]').val() != null)
          query += ' id_tematica = ' + $('select[id=thematics').val();

        if ($('select[id=concentra]').val() != null && $('select[id=thematics]').val() != null)
          query += ' AND';

        if ($('select[id=concentra]').val() != null)
          query += ' concentracion = "' + $('select[id=concentra').val() + '"';

        if (($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null) && ($('select[id=speedway]').val() != null))
          query += ' AND';

        if ($('select[id=speedway]').val() != null)
          query += ' pista_carrera = ' + $('select[id=speedway').val().substring(7);

        if (($('select[id=concentra]').val() != null || $('select[id=thematics]').val() != null || $('select[id=speedway]').val() != null) && $('select[id=states]').val() != null)
          query += ' AND';

        if ($('select[id=states]').val() != null)
          query += ' id_estado = ' + $('select[id=states]').val();

        $.ajax({
          type: 'POST',
          url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
          data: { query: query },
          dataType: 'json',
          success: function (data) {
            if (data.error) {
              alert(data.message);
            } else if (!data.error) {
              console.log(data.message);
              $scope.id_ruta = 0;
              $scope.routes = JSON.parse(data.message);
              $scope.$apply();
              $('.results-list-item').click(function () {
                $('.results-list-item').removeClass('active');
                $(this).addClass('active');
              });
            }
          },
          error: function (xhr, status, error) {
            console.log(xhr.responseText);
            alert('No se pudieron obtener los destinos');
          }
        });
        console.log(query);
      };

      $scope.select_item = function (item) {
        $scope.id_ruta = item;
      };

      $scope.road = function () {

        if ($scope.id_ruta != 0) {
          var query = 'SELECT * FROM descubrir_ruta WHERE id_descubrir_ruta = ' + $scope.id_ruta;
          $.ajax({
            type: 'POST',
            url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/filter',
            data: { query: query },
            dataType: 'json',
            success: function (data) {
              if (data.error) {
                alert(data.message);
              } else if (!data.error) {
                var coord = JSON.parse(data.message);
                $rootScope.destination = {
                  lat: coord[0].altDes,
                  lng: coord[0].latDes
                };
                if (navigator.geolocation) {
                  navigator.geolocation.getCurrentPosition(function (position) {
                    $scope.$apply(function () {
                      $rootScope.origin = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                      };
                      $state.go('menu.caravanaInvitations');
                    });
                  });
                } else {
                  alert('Por favor, enciende tu GPS');
                }
              }
            },
            error: function (xhr, status, error) {
              console.log(xhr.responseText);
              alert('No se pudieron obtener las concentraciones');
            }
          });
        } else {
          alert('No haz seleccionado ningun ruta');
        }
      };


    }])
angular.module('app.controllers')
  .controller('CaravanaInvitations', ['$scope', '$stateParams',
    function ($scope, $stateParams) {


      // $.ajax({
      //   type: 'GET',
      //   url: 'http://startbluesoft.com/rideSafeApp/v1/index.php/caravana/accepted',
      //   dataType: 'json',
      //   success: function (data) {
      //     $scope.users = data;
      //   },
      //   error: function (xhr, status) {
      //   }
      // });
      function runChrono() {
        $scope.$apply(function () {
          if ($scope.chrono > 0) {
            $scope.chrono--;
            setTimeout(runChrono, 1000);
          }
        });
      }
      $scope.chrono = 10;
      $scope.users = [
        { name: 'Carlos Barranco', status: false },
        { name: 'Arturo Caballero', status: true },
        { name: 'Arturo Caballero', status: false },
      ];

      $scope.$on('$ionicView.loaded', function () {
        setTimeout(runChrono, 1000);
      });



    }]);
angular.module('app.controllers')
  .controller('CaravanaReviewRouteCtrl', ['$scope', '$stateParams', '$rootScope', '$state',
    function ($scope, $stateParams, $rootScope, $state) {

      $scope.type_poi = 0;

      function getRoute(fn) {
        var data = {};
        data.start = $rootScope.origin.lat + ',' + $rootScope.origin.lng;
        data.end = $rootScope.destination.lat + ',' + $rootScope.destination.lng;
        data.poi_in = [$scope.type_poi];
        data.weather = true;
        $.ajax({
          crossDomain: true,
          type: 'GET',
          url: 'https://api.sintrafico.com/route',
          data: data,
          headers: { 'X-Requested-With': 'f057f3a4c8b3fcb6584ee22046626c36afc8f3edc682aed5c7ca1d575953d1cc' },
          success: function (e) {
            fn(e);
          }
        });
      }

      $scope.$on('$ionicView.enter', function () {
        $scope.mapr = {
          control: {},
          center: { latitude: $rootScope.origin.lat, longitude: $rootScope.origin.lng },
          zoom: 15,
          options: {
            panControl: false,
            zoomControl: true,
            mapTypeControl: false,
            disableDefaultUI: true,
            scrollwheel: false
          }
        };

        $scope.markerr = {
          id: 0,
          coords: {
            latitude: $rootScope.origin.lat,
            longitude: $rootScope.origin.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          }
        };

        $scope.markerdr = {
          id: 0,
          coords: {
            latitude: $rootScope.destination.lat,
            longitude: $rootScope.destination.lng
          },
          options: {
            draggable: false,
            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          }
        };

        getRoute(function (wps) {
          console.log(wps);
          var wp = [];
          for (var i = 0; i < wps.routes[0].geometry.coordinates.length; i++) {
            wp.push({
              latitude: wps.routes[0].geometry.coordinates[i][1],
              longitude: wps.routes[0].geometry.coordinates[i][0]
            });
          }
          $scope.polylinesr = [{
            id: 1,
            path: wp,
            stroke: {
              color: '#223D75',
              weight: 5
            },
            editable: true,
            draggable: true,
            geodesic: true,
            visible: true
          }];
          $scope.$apply();
        });

      });



      $scope.getGas = function () {
        $scope.type_poi = 2;
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.gas_stations.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.gas_stations[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.gas_stations[i].geometry.coordinates[0],
                name: wps.routes[0].pois.gas_stations[i].description + '<br /	>' + wps.routes[0].pois.gas_stations[i].address + '<br /	>' + wps.routes[0].pois.gas_stations[i].status,
                show: false,
                icon: gasType(wps.routes[0].pois.gas_stations[i].status)
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getIncident = function () {
        $scope.type_poi = 3;
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].pois) {
            for (var i = 0; i < wps.routes[0].pois.incidents.length; i++) {
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.incidents[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.incidents[i].geometry.coordinates[0],
                name: wps.routes[0].pois.incidents[i].description + '<br /	>' + wps.routes[0].pois.incidents[i].address,
                show: false,
                icon: './img/pines/accidente-grave.png'
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getToll = function () {
        $scope.type_poi = 1;
        getRoute(function (wps) {
          console.log(wps);
          $scope.vmr.markers = [];
          if (wps.routes[0].pois.tolls) {
            for (var i = 0; i < wps.routes[0].pois.tolls.length; i++) {
              var cost = 'Costo: ';
              wps.routes[0].pois.tolls[i].rates[0][4] ? cost = cost + wps.routes[0].pois.tolls[i].rates[0][4] : cost = cost + '-';
              var mark = {
                id: i,
                latitude: wps.routes[0].pois.tolls[i].geometry.coordinates[1],
                longitude: wps.routes[0].pois.tolls[i].geometry.coordinates[0],
                name: wps.routes[0].pois.tolls[i].description + '<br /	>' + wps.routes[0].pois.tolls[i].address + '<br /	>' + 'Costo: ' + wps.routes[0].pois.tolls[i].rates[4],
                show: false,
                icon: './img/pines/caseta.png'
              };
              $scope.vmr.markers.push(mark);
            }
            $scope.$apply();
          }
        });
      };

      $scope.getWeather = function () {
        getRoute(function (wps) {
          $scope.vmr.markers = [];
          if (wps.routes[0].legs) {
            console.log(wps.routes[0].legs[0].steps);
            for (var i = 1; i < wps.routes[0].legs[0].steps.length; i++) {
              //console.log(wps.routes[0].legs[0].steps[i].weather.main.temp);
              if (wps.routes[0].legs[0].steps[i].weather) {
                var mark = {
                  id: i,
                  latitude: wps.routes[0].legs[0].steps[i].geometry.coordinates[0][1],
                  longitude: wps.routes[0].legs[0].steps[i].geometry.coordinates[0][0],
                  name: 'Temperatura: ' + (wps.routes[0].legs[0].steps[i].weather.main.temp - 273.15) + '¬∞C' + '<br />' + 'Clima: ' + wps.routes[0].legs[0].steps[i].weather.weather[0].description,
                  show: false,
                  icon: './img/pines/soleado.png'
                };
                $scope.vmr.markers.push(mark);
              }
            }
            $scope.$apply();
          }
        });
      };

      $scope.vmr = [];

      $scope.vmr.markers = [];

      function gasType(status) {
        if (status == 'Con anomal√≠as' || status == 'Se neg√≥ a verificaci√≥n') {
          url = './img/pines/gas-rojo.png';
        } else if (status == 'No verificada') {
          url = './img/pines/gas-naranja.png';
        } else {
          url = './img/pines/gas-verde.png';
        }
        return url;
      }

      $scope.back = function () {
        $state.go('menu.home');
      };

      $scope.polylinesr = [];


    }]);